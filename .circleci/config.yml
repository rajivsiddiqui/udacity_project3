version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...
orbs:
  node: circleci/node@3.0.1
commands:
  destroy-stack:
    description: "Command for reverting and destroying stack"
    parameters:
      to:
        type: string
        default: "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}"
      front:
        type: string
        default: "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Delete s3 files
          command: |
            
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          when: on_fail
      - run:
          name: Delete current stacks
          command: |
            aws cloudformation delete-stack --stack-name  << parameters.to >>
            aws cloudformation delete-stack --stack-name  << parameters.front >>
          when: on_fail
      - run:
          name: Revert last Migration
          command: |
            VALUE=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if $VALUE == "true"
            then
            cd ./backend
            echo "Reverting migrations"
            npm run migrations:revert
            else 
            echo "No migration occured"
            fi
          when: on_fail

jobs:
  hello-world: # Delete this job when you get started
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"
            echo "old workflow id ${OLD_WORKFLOW_ID}"
  
#  build-frontend:
  build-compile-front-end:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build and compile front end
          command: |
           
            cd frontend
            npm i
            npm run build

            
 # build-backend           
  build-compile-back-end:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build and compile back end
          command: |
            cd backend
            ls -ltr
            npm i
            npm run build

# test-frontend:
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend
          command: |
            ls -ltr
            cd frontend
            npm install jest
            npm run test
        
      
# test-backend:
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            ls -ltr
            cd backend
            npm install jest-junit
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/       
  

# scan-frontend:
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan frontend
          command: |
            ls -ltr    
            cd frontend
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force


#  scan-backend:
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-build]
      - run:
            name: scan-backend 
            command: |
             cd backend
             npm i
             #npm audit --audit-level=critical
             npm audit fix --audit-level=critical --force
      

#  deploy-infrastructure:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Verify backend infrastructure
          command: |
            
            cd .circleci
            cd files
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Verify frontend infrastructure
          command: |
            cd .circleci
            cd files
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
   
# get instance ip    
  get_instance_ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get the instance ip address for backend 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)  
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 bkmemstash.sh
            ./bkmemstash.sh
            cat inventory

#  configure-infrastructure: 
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --no-cache --upgrade bash
      - run: apk --no-cache add curl
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: | 
            chmod 777 extract_ip_address.sh 
            ./extract_ip_address.sh
            cat inventory

      - add_ssh_keys:
          fingerprints: ["ae:f4:46:88:71:1b:2b:2d:eb:fd:a1:76:30:c4:15:23"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install openssh
          command: |
            apk add openssh-client      
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=udapeople-prod.cckjtjunno1j.ap-south-1.rds.amazonaws.com >> "backend/.env"
            echo TYPEORM_PORT=5432 >> "backend/.env"
            echo TYPEORM_USERNAME=postgres >> "backend/.env"
            echo TYPEORM_PASSWORD=udapeople123 >> "backend/.env"
            echo TYPEORM_DATABASE=udapeople-prod >> "backend/.env"
            cd .circleci/ansible/      
            pwd
            ls -la
            ansible-playbook -i ~/project/inventory  main.yml
      - destroy-stack                  

#  run-migrations:
  run_db_migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run: 
         cd backend && npm install
      - run: 
          name: Run database migrations 
          no_output_timeout: 10m
          command: |
            touch migration_results
            cd backend && npm run migrations > migration_results
            
            
      - run: 
          name: Save result value
          command: |
            cd backend
            if grep "executed successfully" migration_results.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - destroy-stack      

  build_copy_backend_files:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run: apk add --no-cache --upgrade bash
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 extract_ip_address.sh 
            ./extract_ip_address.sh  
     
      - add_ssh_keys:
          fingerprints: ["ae:f4:46:88:71:1b:2b:2d:eb:fd:a1:76:30:c4:15:23"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Install openssh
          command: |
             apk add openssh-client 
      - run:
          name: Copy files to server
          no_output_timeout: 60m
          command: | 
            printenv >> ./backend/.env
            cat ./backend/.env
            cd .circleci/ansible/ 
            ansible-playbook -i ~/project/inventory  copy_backend_playbook.yml
      
      - destroy-stack      


  prepare_distribution_frontend_files_to_s3:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run: apk add --no-cache --upgrade bash
      - run:
          name: Install awscli
          command: |
            pip3 install awscli
      - run:
          name: set the API_URL to environment so that frontend can burn it to the code on compile. 
          command: |
            chmod 777 set_backend_ip_env.sh
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP
            cd frontend                                         
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL >> .env
            echo $API_URL
            apk add --update npm
            npm install
            npm run build
       
      - run: aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-stack                     

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:
  run_smoke_test:
    docker:
      - image: python:3.7-alpine3.11
    environment: 
      ID: arns3
    steps:
      - checkout
      - run: apk --no-cache add curl
      - run:
          name: set the API_URL to environment so that smoke test can be done to backend . 
          command: |
            chmod 777 set_backend_ip_env.sh
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
          
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL >> frontend/.env
            echo $API_URL
    
     
      - run:
          name: Install awscli
          command: |
            pip3 install awscli 
      - run:
          name: smoke test frontend 
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.ap-south-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi       
      - run:
          name: smoke test for backend.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:project, Values=udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            curl "http://${BACKEND_IP}:3030/api/status"
      
      - destroy-stack      

#  cloudfront-update:
  promote_to_production_and_clean_up:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: promote newly deployed app to production
          command: |
            aws cloudformation create-stack  \
              --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople'
      - run:
          name: Wait for the cf stack to complete
          command : sleep 300         
      - run:
          name: perform cleanup
          command: |
            set TERM=xterm

            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --region ap-south-1 --no-paginate --output text)
            echo "Old Workflow Id 2nd time is ${OldWorkflowID}"

            if [ -n "${OldWorkflowID}" ]
            then
              echo "Empty old S3 bucket and delete old frontend stack"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-prod-${OldWorkflowID}
              echo "Delete old backend stack"
              aws cloudformation delete-stack --stack-name udapeople-backend-prod-${OldWorkflowID} 
              echo "stack deleted succesfully"

            fi  
      - destroy-stack       

workflows:
  default:
    jobs:
      - hello-world
      - build-compile-front-end
      - build-compile-back-end
      - test-frontend:
          requires:
            - build-compile-front-end
            - build-compile-back-end
      - test-backend:
          requires:
            - build-compile-front-end
            - build-compile-back-end
      - scan-frontend:
          requires:
            - test-frontend
            - test-backend
      - scan-backend:
          requires:
            - test-frontend
            - test-backend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
      - get_instance_ip:
          requires:
            - deploy-infrastructure
      - configure_infrastructure:
          requires:
            - get_instance_ip
      - run_db_migrations:
          requires:
            - configure_infrastructure
      - build_copy_backend_files:
          requires:
            - run_db_migrations
      - prepare_distribution_frontend_files_to_s3:  
          requires:
            - build_copy_backend_files
      - run_smoke_test:
          requires:
            - prepare_distribution_frontend_files_to_s3
      - promote_to_production_and_clean_up:
          requires:
            - run_smoke_test                       


